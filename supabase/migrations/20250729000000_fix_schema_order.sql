-- Fix schema order to ensure tables exist before triggers

-- Drop triggers if they exist to avoid conflicts
DROP TRIGGER IF EXISTS set_league_join_code ON public.leagues;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Create tables first (if they don't exist)
-- Competitions table
CREATE TABLE IF NOT EXISTS public.competitions (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  api_id TEXT NOT NULL,
  name TEXT NOT NULL,
  code TEXT NOT NULL,
  type TEXT,
  logo TEXT NOT NULL,
  area TEXT,
  flag TEXT,
  competition_start_date TEXT NOT NULL,
  competition_end_date TEXT NOT NULL,
  current_matchday SMALLINT,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMP DEFAULT now() NOT NULL
);

-- Teams table
CREATE TABLE IF NOT EXISTS public.teams (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  api_id TEXT NOT NULL,
  name TEXT NOT NULL,
  short_name TEXT,
  tla TEXT,
  crest TEXT,
  competition_id BIGINT REFERENCES public.competitions(id),
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMP DEFAULT now() NOT NULL
);

-- Leagues table
CREATE TABLE IF NOT EXISTS public.leagues (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  owner_id UUID NOT NULL,
  join_code TEXT NOT NULL UNIQUE,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT leagues_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT,
  email TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- League members table
CREATE TABLE IF NOT EXISTS public.league_members (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  league_id UUID NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT league_members_league_id_user_id_key UNIQUE (league_id, user_id)
);

-- Now create triggers
-- Trigger for generating join codes
CREATE OR REPLACE TRIGGER set_league_join_code
BEFORE INSERT ON public.leagues
FOR EACH ROW
WHEN (new.join_code IS NULL)
EXECUTE FUNCTION public.generate_league_join_code();

-- Trigger for handling new users
CREATE OR REPLACE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user(); 